// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_INCLUDED_packet_2eproto
#define PROTOBUF_INCLUDED_packet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "command.pb.h"
#include "replacement.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_packet_2eproto 

namespace protobuf_packet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_packet_2eproto
namespace fira_message {
namespace sim_to_ref {
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
namespace google {
namespace protobuf {
template<> ::fira_message::sim_to_ref::Environment* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Environment>(Arena*);
template<> ::fira_message::sim_to_ref::Packet* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Packet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fira_message.sim_to_ref.Commands cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  private:
  const ::fira_message::sim_to_ref::Commands& _internal_cmd() const;
  public:
  const ::fira_message::sim_to_ref::Commands& cmd() const;
  ::fira_message::sim_to_ref::Commands* release_cmd();
  ::fira_message::sim_to_ref::Commands* mutable_cmd();
  void set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd);

  // .fira_message.sim_to_ref.Replacement replace = 2;
  bool has_replace() const;
  void clear_replace();
  static const int kReplaceFieldNumber = 2;
  private:
  const ::fira_message::sim_to_ref::Replacement& _internal_replace() const;
  public:
  const ::fira_message::sim_to_ref::Replacement& replace() const;
  ::fira_message::sim_to_ref::Replacement* release_replace();
  ::fira_message::sim_to_ref::Replacement* mutable_replace();
  void set_allocated_replace(::fira_message::sim_to_ref::Replacement* replace);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fira_message::sim_to_ref::Commands* cmd_;
  ::fira_message::sim_to_ref::Replacement* replace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_packet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Environment) */ {
 public:
  Environment();
  virtual ~Environment();

  Environment(const Environment& from);

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Environment* other);
  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(NULL);
  }

  Environment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fira_message.Frame frame = 2;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  private:
  const ::fira_message::Frame& _internal_frame() const;
  public:
  const ::fira_message::Frame& frame() const;
  ::fira_message::Frame* release_frame();
  ::fira_message::Frame* mutable_frame();
  void set_allocated_frame(::fira_message::Frame* frame);

  // .fira_message.Field field = 3;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 3;
  private:
  const ::fira_message::Field& _internal_field() const;
  public:
  const ::fira_message::Field& field() const;
  ::fira_message::Field* release_field();
  ::fira_message::Field* mutable_field();
  void set_allocated_field(::fira_message::Field* field);

  // uint32 step = 1;
  void clear_step();
  static const int kStepFieldNumber = 1;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Environment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fira_message::Frame* frame_;
  ::fira_message::Field* field_;
  ::google::protobuf::uint32 step_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_packet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .fira_message.sim_to_ref.Commands cmd = 1;
inline bool Packet::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
inline const ::fira_message::sim_to_ref::Commands& Packet::_internal_cmd() const {
  return *cmd_;
}
inline const ::fira_message::sim_to_ref::Commands& Packet::cmd() const {
  const ::fira_message::sim_to_ref::Commands* p = cmd_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.cmd)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Commands*>(
      &::fira_message::sim_to_ref::_Commands_default_instance_);
}
inline ::fira_message::sim_to_ref::Commands* Packet::release_cmd() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.cmd)
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::mutable_cmd() {
  
  if (cmd_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(GetArenaNoVirtual());
    cmd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.cmd)
  return cmd_;
}
inline void Packet::set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cmd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}

// .fira_message.sim_to_ref.Replacement replace = 2;
inline bool Packet::has_replace() const {
  return this != internal_default_instance() && replace_ != NULL;
}
inline const ::fira_message::sim_to_ref::Replacement& Packet::_internal_replace() const {
  return *replace_;
}
inline const ::fira_message::sim_to_ref::Replacement& Packet::replace() const {
  const ::fira_message::sim_to_ref::Replacement* p = replace_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.replace)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Replacement*>(
      &::fira_message::sim_to_ref::_Replacement_default_instance_);
}
inline ::fira_message::sim_to_ref::Replacement* Packet::release_replace() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.replace)
  
  ::fira_message::sim_to_ref::Replacement* temp = replace_;
  replace_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Replacement* Packet::mutable_replace() {
  
  if (replace_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Replacement>(GetArenaNoVirtual());
    replace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.replace)
  return replace_;
}
inline void Packet::set_allocated_replace(::fira_message::sim_to_ref::Replacement* replace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(replace_);
  }
  if (replace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replace, submessage_arena);
    }
    
  } else {
    
  }
  replace_ = replace;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.replace)
}

// -------------------------------------------------------------------

// Environment

// uint32 step = 1;
inline void Environment::clear_step() {
  step_ = 0u;
}
inline ::google::protobuf::uint32 Environment::step() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.step)
  return step_;
}
inline void Environment::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.step)
}

// .fira_message.Frame frame = 2;
inline bool Environment::has_frame() const {
  return this != internal_default_instance() && frame_ != NULL;
}
inline const ::fira_message::Frame& Environment::_internal_frame() const {
  return *frame_;
}
inline const ::fira_message::Frame& Environment::frame() const {
  const ::fira_message::Frame* p = frame_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::Frame*>(
      &::fira_message::_Frame_default_instance_);
}
inline ::fira_message::Frame* Environment::release_frame() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.frame)
  
  ::fira_message::Frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline ::fira_message::Frame* Environment::mutable_frame() {
  
  if (frame_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::Frame>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.frame)
  return frame_;
}
inline void Environment::set_allocated_frame(::fira_message::Frame* frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(frame_);
  }
  if (frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.frame)
}

// .fira_message.Field field = 3;
inline bool Environment::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::fira_message::Field& Environment::_internal_field() const {
  return *field_;
}
inline const ::fira_message::Field& Environment::field() const {
  const ::fira_message::Field* p = field_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.field)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::Field*>(
      &::fira_message::_Field_default_instance_);
}
inline ::fira_message::Field* Environment::release_field() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.field)
  
  ::fira_message::Field* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::fira_message::Field* Environment::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::Field>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.field)
  return field_;
}
inline void Environment::set_allocated_field(::fira_message::Field* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_packet_2eproto
