// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replacement.proto

#include "replacement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Robot;
}  // namespace protobuf_common_2eproto
namespace protobuf_replacement_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_replacement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BallReplacement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_replacement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RobotReplacement;
}  // namespace protobuf_replacement_2eproto
namespace fira_message {
namespace sim_to_ref {
class RobotReplacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotReplacement>
      _instance;
} _RobotReplacement_default_instance_;
class BallReplacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallReplacement>
      _instance;
} _BallReplacement_default_instance_;
class ReplacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Replacement>
      _instance;
} _Replacement_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
namespace protobuf_replacement_2eproto {
static void InitDefaultsRobotReplacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fira_message::sim_to_ref::_RobotReplacement_default_instance_;
    new (ptr) ::fira_message::sim_to_ref::RobotReplacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fira_message::sim_to_ref::RobotReplacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotReplacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotReplacement}, {
      &protobuf_common_2eproto::scc_info_Robot.base,}};

static void InitDefaultsBallReplacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fira_message::sim_to_ref::_BallReplacement_default_instance_;
    new (ptr) ::fira_message::sim_to_ref::BallReplacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fira_message::sim_to_ref::BallReplacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BallReplacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBallReplacement}, {}};

static void InitDefaultsReplacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fira_message::sim_to_ref::_Replacement_default_instance_;
    new (ptr) ::fira_message::sim_to_ref::Replacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fira_message::sim_to_ref::Replacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Replacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReplacement}, {
      &protobuf_replacement_2eproto::scc_info_BallReplacement.base,
      &protobuf_replacement_2eproto::scc_info_RobotReplacement.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RobotReplacement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BallReplacement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Replacement.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::RobotReplacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::RobotReplacement, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::RobotReplacement, yellowteam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::RobotReplacement, turnon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::BallReplacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::BallReplacement, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::BallReplacement, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::BallReplacement, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::BallReplacement, vy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::Replacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::Replacement, ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fira_message::sim_to_ref::Replacement, robots_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fira_message::sim_to_ref::RobotReplacement)},
  { 8, -1, sizeof(::fira_message::sim_to_ref::BallReplacement)},
  { 17, -1, sizeof(::fira_message::sim_to_ref::Replacement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fira_message::sim_to_ref::_RobotReplacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fira_message::sim_to_ref::_BallReplacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fira_message::sim_to_ref::_Replacement_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "replacement.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021replacement.proto\022\027fira_message.sim_to"
      "_ref\032\014common.proto\"]\n\020RobotReplacement\022%"
      "\n\010position\030\001 \001(\0132\023.fira_message.Robot\022\022\n"
      "\nyellowteam\030\005 \001(\010\022\016\n\006turnon\030\006 \001(\010\"\?\n\017Bal"
      "lReplacement\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\n\n\002vx"
      "\030\003 \001(\001\022\n\n\002vy\030\004 \001(\001\"\200\001\n\013Replacement\0226\n\004ba"
      "ll\030\001 \001(\0132(.fira_message.sim_to_ref.BallR"
      "eplacement\0229\n\006robots\030\002 \003(\0132).fira_messag"
      "e.sim_to_ref.RobotReplacementb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "replacement.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_replacement_2eproto
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

void RobotReplacement::InitAsDefaultInstance() {
  ::fira_message::sim_to_ref::_RobotReplacement_default_instance_._instance.get_mutable()->position_ = const_cast< ::fira_message::Robot*>(
      ::fira_message::Robot::internal_default_instance());
}
void RobotReplacement::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotReplacement::kPositionFieldNumber;
const int RobotReplacement::kYellowteamFieldNumber;
const int RobotReplacement::kTurnonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotReplacement::RobotReplacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_replacement_2eproto::scc_info_RobotReplacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.RobotReplacement)
}
RobotReplacement::RobotReplacement(const RobotReplacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::fira_message::Robot(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&yellowteam_, &from.yellowteam_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnon_) -
    reinterpret_cast<char*>(&yellowteam_)) + sizeof(turnon_));
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.RobotReplacement)
}

void RobotReplacement::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnon_) -
      reinterpret_cast<char*>(&position_)) + sizeof(turnon_));
}

RobotReplacement::~RobotReplacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.RobotReplacement)
  SharedDtor();
}

void RobotReplacement::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void RobotReplacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotReplacement::descriptor() {
  ::protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotReplacement& RobotReplacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_replacement_2eproto::scc_info_RobotReplacement.base);
  return *internal_default_instance();
}


void RobotReplacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.RobotReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&yellowteam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnon_) -
      reinterpret_cast<char*>(&yellowteam_)) + sizeof(turnon_));
  _internal_metadata_.Clear();
}

bool RobotReplacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.RobotReplacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fira_message.Robot position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool yellowteam = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yellowteam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turnon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turnon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.RobotReplacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.RobotReplacement)
  return false;
#undef DO_
}

void RobotReplacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.RobotReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fira_message.Robot position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->yellowteam(), output);
  }

  // bool turnon = 6;
  if (this->turnon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->turnon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.RobotReplacement)
}

::google::protobuf::uint8* RobotReplacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.RobotReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fira_message.Robot position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->yellowteam(), target);
  }

  // bool turnon = 6;
  if (this->turnon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->turnon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.RobotReplacement)
  return target;
}

size_t RobotReplacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.RobotReplacement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .fira_message.Robot position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    total_size += 1 + 1;
  }

  // bool turnon = 6;
  if (this->turnon() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotReplacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.RobotReplacement)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotReplacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotReplacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.RobotReplacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.RobotReplacement)
    MergeFrom(*source);
  }
}

void RobotReplacement::MergeFrom(const RobotReplacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.RobotReplacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::fira_message::Robot::MergeFrom(from.position());
  }
  if (from.yellowteam() != 0) {
    set_yellowteam(from.yellowteam());
  }
  if (from.turnon() != 0) {
    set_turnon(from.turnon());
  }
}

void RobotReplacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotReplacement::CopyFrom(const RobotReplacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotReplacement::IsInitialized() const {
  return true;
}

void RobotReplacement::Swap(RobotReplacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotReplacement::InternalSwap(RobotReplacement* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(yellowteam_, other->yellowteam_);
  swap(turnon_, other->turnon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotReplacement::GetMetadata() const {
  protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BallReplacement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallReplacement::kXFieldNumber;
const int BallReplacement::kYFieldNumber;
const int BallReplacement::kVxFieldNumber;
const int BallReplacement::kVyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallReplacement::BallReplacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_replacement_2eproto::scc_info_BallReplacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.BallReplacement)
}
BallReplacement::BallReplacement(const BallReplacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.BallReplacement)
}

void BallReplacement::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
}

BallReplacement::~BallReplacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.BallReplacement)
  SharedDtor();
}

void BallReplacement::SharedDtor() {
}

void BallReplacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BallReplacement::descriptor() {
  ::protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallReplacement& BallReplacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_replacement_2eproto::scc_info_BallReplacement.base);
  return *internal_default_instance();
}


void BallReplacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.BallReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  _internal_metadata_.Clear();
}

bool BallReplacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.BallReplacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.BallReplacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.BallReplacement)
  return false;
#undef DO_
}

void BallReplacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.BallReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double vx = 3;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vx(), output);
  }

  // double vy = 4;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.BallReplacement)
}

::google::protobuf::uint8* BallReplacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.BallReplacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double vx = 3;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vx(), target);
  }

  // double vy = 4;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.BallReplacement)
  return target;
}

size_t BallReplacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.BallReplacement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double vx = 3;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // double vy = 4;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallReplacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.BallReplacement)
  GOOGLE_DCHECK_NE(&from, this);
  const BallReplacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallReplacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.BallReplacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.BallReplacement)
    MergeFrom(*source);
  }
}

void BallReplacement::MergeFrom(const BallReplacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.BallReplacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
}

void BallReplacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.BallReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallReplacement::CopyFrom(const BallReplacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.BallReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallReplacement::IsInitialized() const {
  return true;
}

void BallReplacement::Swap(BallReplacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallReplacement::InternalSwap(BallReplacement* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BallReplacement::GetMetadata() const {
  protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Replacement::InitAsDefaultInstance() {
  ::fira_message::sim_to_ref::_Replacement_default_instance_._instance.get_mutable()->ball_ = const_cast< ::fira_message::sim_to_ref::BallReplacement*>(
      ::fira_message::sim_to_ref::BallReplacement::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Replacement::kBallFieldNumber;
const int Replacement::kRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Replacement::Replacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_replacement_2eproto::scc_info_Replacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Replacement)
}
Replacement::Replacement(const Replacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      robots_(from.robots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ball()) {
    ball_ = new ::fira_message::sim_to_ref::BallReplacement(*from.ball_);
  } else {
    ball_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Replacement)
}

void Replacement::SharedCtor() {
  ball_ = NULL;
}

Replacement::~Replacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Replacement)
  SharedDtor();
}

void Replacement::SharedDtor() {
  if (this != internal_default_instance()) delete ball_;
}

void Replacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Replacement::descriptor() {
  ::protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Replacement& Replacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_replacement_2eproto::scc_info_Replacement.base);
  return *internal_default_instance();
}


void Replacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Replacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_.Clear();
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) {
    delete ball_;
  }
  ball_ = NULL;
  _internal_metadata_.Clear();
}

bool Replacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Replacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fira_message.sim_to_ref.BallReplacement ball = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Replacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Replacement)
  return false;
#undef DO_
}

void Replacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Replacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ball(), output);
  }

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->robots(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Replacement)
}

::google::protobuf::uint8* Replacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Replacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ball(), deterministic, target);
  }

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->robots(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Replacement)
  return target;
}

size_t Replacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Replacement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots(static_cast<int>(i)));
    }
  }

  // .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ball_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Replacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Replacement)
  GOOGLE_DCHECK_NE(&from, this);
  const Replacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Replacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Replacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Replacement)
    MergeFrom(*source);
  }
}

void Replacement::MergeFrom(const Replacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Replacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_.MergeFrom(from.robots_);
  if (from.has_ball()) {
    mutable_ball()->::fira_message::sim_to_ref::BallReplacement::MergeFrom(from.ball());
  }
}

void Replacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Replacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replacement::CopyFrom(const Replacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Replacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replacement::IsInitialized() const {
  return true;
}

void Replacement::Swap(Replacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Replacement::InternalSwap(Replacement* other) {
  using std::swap;
  CastToBase(&robots_)->InternalSwap(CastToBase(&other->robots_));
  swap(ball_, other->ball_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Replacement::GetMetadata() const {
  protobuf_replacement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_replacement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_to_ref
}  // namespace fira_message
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fira_message::sim_to_ref::RobotReplacement* Arena::CreateMaybeMessage< ::fira_message::sim_to_ref::RobotReplacement >(Arena* arena) {
  return Arena::CreateInternal< ::fira_message::sim_to_ref::RobotReplacement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fira_message::sim_to_ref::BallReplacement* Arena::CreateMaybeMessage< ::fira_message::sim_to_ref::BallReplacement >(Arena* arena) {
  return Arena::CreateInternal< ::fira_message::sim_to_ref::BallReplacement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fira_message::sim_to_ref::Replacement* Arena::CreateMaybeMessage< ::fira_message::sim_to_ref::Replacement >(Arena* arena) {
  return Arena::CreateInternal< ::fira_message::sim_to_ref::Replacement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
