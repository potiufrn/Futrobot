// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replacement.proto

#ifndef PROTOBUF_INCLUDED_replacement_2eproto
#define PROTOBUF_INCLUDED_replacement_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_replacement_2eproto 

namespace protobuf_replacement_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_replacement_2eproto
namespace fira_message {
namespace sim_to_ref {
class BallReplacement;
class BallReplacementDefaultTypeInternal;
extern BallReplacementDefaultTypeInternal _BallReplacement_default_instance_;
class Replacement;
class ReplacementDefaultTypeInternal;
extern ReplacementDefaultTypeInternal _Replacement_default_instance_;
class RobotReplacement;
class RobotReplacementDefaultTypeInternal;
extern RobotReplacementDefaultTypeInternal _RobotReplacement_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
namespace google {
namespace protobuf {
template<> ::fira_message::sim_to_ref::BallReplacement* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::BallReplacement>(Arena*);
template<> ::fira_message::sim_to_ref::Replacement* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Replacement>(Arena*);
template<> ::fira_message::sim_to_ref::RobotReplacement* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::RobotReplacement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

class RobotReplacement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.RobotReplacement) */ {
 public:
  RobotReplacement();
  virtual ~RobotReplacement();

  RobotReplacement(const RobotReplacement& from);

  inline RobotReplacement& operator=(const RobotReplacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotReplacement(RobotReplacement&& from) noexcept
    : RobotReplacement() {
    *this = ::std::move(from);
  }

  inline RobotReplacement& operator=(RobotReplacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotReplacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotReplacement* internal_default_instance() {
    return reinterpret_cast<const RobotReplacement*>(
               &_RobotReplacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RobotReplacement* other);
  friend void swap(RobotReplacement& a, RobotReplacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotReplacement* New() const final {
    return CreateMaybeMessage<RobotReplacement>(NULL);
  }

  RobotReplacement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotReplacement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotReplacement& from);
  void MergeFrom(const RobotReplacement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotReplacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fira_message.Robot position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::fira_message::Robot& _internal_position() const;
  public:
  const ::fira_message::Robot& position() const;
  ::fira_message::Robot* release_position();
  ::fira_message::Robot* mutable_position();
  void set_allocated_position(::fira_message::Robot* position);

  // bool yellowteam = 5;
  void clear_yellowteam();
  static const int kYellowteamFieldNumber = 5;
  bool yellowteam() const;
  void set_yellowteam(bool value);

  // bool turnon = 6;
  void clear_turnon();
  static const int kTurnonFieldNumber = 6;
  bool turnon() const;
  void set_turnon(bool value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.RobotReplacement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fira_message::Robot* position_;
  bool yellowteam_;
  bool turnon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_replacement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BallReplacement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.BallReplacement) */ {
 public:
  BallReplacement();
  virtual ~BallReplacement();

  BallReplacement(const BallReplacement& from);

  inline BallReplacement& operator=(const BallReplacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BallReplacement(BallReplacement&& from) noexcept
    : BallReplacement() {
    *this = ::std::move(from);
  }

  inline BallReplacement& operator=(BallReplacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallReplacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallReplacement* internal_default_instance() {
    return reinterpret_cast<const BallReplacement*>(
               &_BallReplacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BallReplacement* other);
  friend void swap(BallReplacement& a, BallReplacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BallReplacement* New() const final {
    return CreateMaybeMessage<BallReplacement>(NULL);
  }

  BallReplacement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BallReplacement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BallReplacement& from);
  void MergeFrom(const BallReplacement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallReplacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double vx = 3;
  void clear_vx();
  static const int kVxFieldNumber = 3;
  double vx() const;
  void set_vx(double value);

  // double vy = 4;
  void clear_vy();
  static const int kVyFieldNumber = 4;
  double vy() const;
  void set_vy(double value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.BallReplacement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double vx_;
  double vy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_replacement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Replacement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Replacement) */ {
 public:
  Replacement();
  virtual ~Replacement();

  Replacement(const Replacement& from);

  inline Replacement& operator=(const Replacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Replacement(Replacement&& from) noexcept
    : Replacement() {
    *this = ::std::move(from);
  }

  inline Replacement& operator=(Replacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Replacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Replacement* internal_default_instance() {
    return reinterpret_cast<const Replacement*>(
               &_Replacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Replacement* other);
  friend void swap(Replacement& a, Replacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Replacement* New() const final {
    return CreateMaybeMessage<Replacement>(NULL);
  }

  Replacement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Replacement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Replacement& from);
  void MergeFrom(const Replacement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Replacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 2;
  ::fira_message::sim_to_ref::RobotReplacement* mutable_robots(int index);
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >*
      mutable_robots();
  const ::fira_message::sim_to_ref::RobotReplacement& robots(int index) const;
  ::fira_message::sim_to_ref::RobotReplacement* add_robots();
  const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >&
      robots() const;

  // .fira_message.sim_to_ref.BallReplacement ball = 1;
  bool has_ball() const;
  void clear_ball();
  static const int kBallFieldNumber = 1;
  private:
  const ::fira_message::sim_to_ref::BallReplacement& _internal_ball() const;
  public:
  const ::fira_message::sim_to_ref::BallReplacement& ball() const;
  ::fira_message::sim_to_ref::BallReplacement* release_ball();
  ::fira_message::sim_to_ref::BallReplacement* mutable_ball();
  void set_allocated_ball(::fira_message::sim_to_ref::BallReplacement* ball);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Replacement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement > robots_;
  ::fira_message::sim_to_ref::BallReplacement* ball_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_replacement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotReplacement

// .fira_message.Robot position = 1;
inline bool RobotReplacement::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::fira_message::Robot& RobotReplacement::_internal_position() const {
  return *position_;
}
inline const ::fira_message::Robot& RobotReplacement::position() const {
  const ::fira_message::Robot* p = position_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.position)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::Robot*>(
      &::fira_message::_Robot_default_instance_);
}
inline ::fira_message::Robot* RobotReplacement::release_position() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.RobotReplacement.position)
  
  ::fira_message::Robot* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::fira_message::Robot* RobotReplacement::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::Robot>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.RobotReplacement.position)
  return position_;
}
inline void RobotReplacement::set_allocated_position(::fira_message::Robot* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.RobotReplacement.position)
}

// bool yellowteam = 5;
inline void RobotReplacement::clear_yellowteam() {
  yellowteam_ = false;
}
inline bool RobotReplacement::yellowteam() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.yellowteam)
  return yellowteam_;
}
inline void RobotReplacement::set_yellowteam(bool value) {
  
  yellowteam_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.RobotReplacement.yellowteam)
}

// bool turnon = 6;
inline void RobotReplacement::clear_turnon() {
  turnon_ = false;
}
inline bool RobotReplacement::turnon() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.turnon)
  return turnon_;
}
inline void RobotReplacement::set_turnon(bool value) {
  
  turnon_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.RobotReplacement.turnon)
}

// -------------------------------------------------------------------

// BallReplacement

// double x = 1;
inline void BallReplacement::clear_x() {
  x_ = 0;
}
inline double BallReplacement::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.x)
  return x_;
}
inline void BallReplacement::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.x)
}

// double y = 2;
inline void BallReplacement::clear_y() {
  y_ = 0;
}
inline double BallReplacement::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.y)
  return y_;
}
inline void BallReplacement::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.y)
}

// double vx = 3;
inline void BallReplacement::clear_vx() {
  vx_ = 0;
}
inline double BallReplacement::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.vx)
  return vx_;
}
inline void BallReplacement::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.vx)
}

// double vy = 4;
inline void BallReplacement::clear_vy() {
  vy_ = 0;
}
inline double BallReplacement::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.vy)
  return vy_;
}
inline void BallReplacement::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.vy)
}

// -------------------------------------------------------------------

// Replacement

// .fira_message.sim_to_ref.BallReplacement ball = 1;
inline bool Replacement::has_ball() const {
  return this != internal_default_instance() && ball_ != NULL;
}
inline void Replacement::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) {
    delete ball_;
  }
  ball_ = NULL;
}
inline const ::fira_message::sim_to_ref::BallReplacement& Replacement::_internal_ball() const {
  return *ball_;
}
inline const ::fira_message::sim_to_ref::BallReplacement& Replacement::ball() const {
  const ::fira_message::sim_to_ref::BallReplacement* p = ball_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Replacement.ball)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::BallReplacement*>(
      &::fira_message::sim_to_ref::_BallReplacement_default_instance_);
}
inline ::fira_message::sim_to_ref::BallReplacement* Replacement::release_ball() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Replacement.ball)
  
  ::fira_message::sim_to_ref::BallReplacement* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::BallReplacement* Replacement::mutable_ball() {
  
  if (ball_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::BallReplacement>(GetArenaNoVirtual());
    ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Replacement.ball)
  return ball_;
}
inline void Replacement::set_allocated_ball(::fira_message::sim_to_ref::BallReplacement* ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ball_;
  }
  if (ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Replacement.ball)
}

// repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
inline int Replacement::robots_size() const {
  return robots_.size();
}
inline void Replacement::clear_robots() {
  robots_.Clear();
}
inline ::fira_message::sim_to_ref::RobotReplacement* Replacement::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >*
Replacement::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Replacement.robots)
  return &robots_;
}
inline const ::fira_message::sim_to_ref::RobotReplacement& Replacement::robots(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Get(index);
}
inline ::fira_message::sim_to_ref::RobotReplacement* Replacement::add_robots() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >&
Replacement::robots() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Replacement.robots)
  return robots_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_replacement_2eproto
