// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vssref_placement.proto

#ifndef PROTOBUF_INCLUDED_vssref_5fplacement_2eproto
#define PROTOBUF_INCLUDED_vssref_5fplacement_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vssref_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vssref_5fplacement_2eproto 

namespace protobuf_vssref_5fplacement_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vssref_5fplacement_2eproto
namespace VSSRef {
namespace team_to_ref {
class VSSRef_Placement;
class VSSRef_PlacementDefaultTypeInternal;
extern VSSRef_PlacementDefaultTypeInternal _VSSRef_Placement_default_instance_;
}  // namespace team_to_ref
}  // namespace VSSRef
namespace google {
namespace protobuf {
template<> ::VSSRef::team_to_ref::VSSRef_Placement* Arena::CreateMaybeMessage<::VSSRef::team_to_ref::VSSRef_Placement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace VSSRef {
namespace team_to_ref {

// ===================================================================

class VSSRef_Placement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VSSRef.team_to_ref.VSSRef_Placement) */ {
 public:
  VSSRef_Placement();
  virtual ~VSSRef_Placement();

  VSSRef_Placement(const VSSRef_Placement& from);

  inline VSSRef_Placement& operator=(const VSSRef_Placement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VSSRef_Placement(VSSRef_Placement&& from) noexcept
    : VSSRef_Placement() {
    *this = ::std::move(from);
  }

  inline VSSRef_Placement& operator=(VSSRef_Placement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VSSRef_Placement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VSSRef_Placement* internal_default_instance() {
    return reinterpret_cast<const VSSRef_Placement*>(
               &_VSSRef_Placement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VSSRef_Placement* other);
  friend void swap(VSSRef_Placement& a, VSSRef_Placement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VSSRef_Placement* New() const final {
    return CreateMaybeMessage<VSSRef_Placement>(NULL);
  }

  VSSRef_Placement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VSSRef_Placement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VSSRef_Placement& from);
  void MergeFrom(const VSSRef_Placement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VSSRef_Placement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VSSRef.Frame world = 1;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 1;
  private:
  const ::VSSRef::Frame& _internal_world() const;
  public:
  const ::VSSRef::Frame& world() const;
  ::VSSRef::Frame* release_world();
  ::VSSRef::Frame* mutable_world();
  void set_allocated_world(::VSSRef::Frame* world);

  // @@protoc_insertion_point(class_scope:VSSRef.team_to_ref.VSSRef_Placement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VSSRef::Frame* world_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vssref_5fplacement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VSSRef_Placement

// .VSSRef.Frame world = 1;
inline bool VSSRef_Placement::has_world() const {
  return this != internal_default_instance() && world_ != NULL;
}
inline const ::VSSRef::Frame& VSSRef_Placement::_internal_world() const {
  return *world_;
}
inline const ::VSSRef::Frame& VSSRef_Placement::world() const {
  const ::VSSRef::Frame* p = world_;
  // @@protoc_insertion_point(field_get:VSSRef.team_to_ref.VSSRef_Placement.world)
  return p != NULL ? *p : *reinterpret_cast<const ::VSSRef::Frame*>(
      &::VSSRef::_Frame_default_instance_);
}
inline ::VSSRef::Frame* VSSRef_Placement::release_world() {
  // @@protoc_insertion_point(field_release:VSSRef.team_to_ref.VSSRef_Placement.world)
  
  ::VSSRef::Frame* temp = world_;
  world_ = NULL;
  return temp;
}
inline ::VSSRef::Frame* VSSRef_Placement::mutable_world() {
  
  if (world_ == NULL) {
    auto* p = CreateMaybeMessage<::VSSRef::Frame>(GetArenaNoVirtual());
    world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VSSRef.team_to_ref.VSSRef_Placement.world)
  return world_;
}
inline void VSSRef_Placement::set_allocated_world(::VSSRef::Frame* world) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(world_);
  }
  if (world) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world, submessage_arena);
    }
    
  } else {
    
  }
  world_ = world;
  // @@protoc_insertion_point(field_set_allocated:VSSRef.team_to_ref.VSSRef_Placement.world)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace team_to_ref
}  // namespace VSSRef

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vssref_5fplacement_2eproto
